#!/usr/bin/env bash

# Collected system info
declare -a IFACES
declare -a DNSERVERS=()

nif_collect_dns_servers()
{
    local -n dnlist='DNSERVERS'

    local reip='[[:digit:]]{1,3}(\.[[:digit:]]{1,3}){3}'
    local reline="^[[:space:]]*DNS Servers:[[:space:]](${reip})$"
    local IFS=$'\n'
    local -a lines=( $( resolvectl status ) )
    local line
    local -i saving=0
    for line in "${lines[@]}"; do
        if [ "$saving" -eq 0 ] && [[ "$line" =~ $reline ]]; then
            saving=1
            dnlist=( "${BASH_REMATCH[1]}" )
        elif [ "$saving" -eq 1 ]; then
            if [[ "$line" =~ ^[[:space:]]+(${reip})$ ]]; then
                dnlist=( "${dnlist[@]}"
                            "${BASH_REMATCH[1]}" )
            else
                saving=2
            fi
        fi
    done
}

nif_discern_external_iface()
{
    local iroute ifacename
    if [ "${#DNSERVERS[@]}" -gt 0 ]; then
        iroute=$( ip route get "${DNSERVERS[0]}" )

        if [[ "$iroute" =~ .*\ dev\ ([[:alnum:]]+)\ src\ ([.[:digit:]]+) ]]; then
            echo "${BASH_REMATCH[1]} ${BASH_REMATCH[2]}"
            return 0
        fi
    else
        echo "There are no DN Servers found." >&2
    fi
    return 1
}

nif_collect_interfaces()
{
    local IFS=$' '

    # Get local handle on global IFACES:
    local -n iflist='IFACES'
    iflist=()

    # Get external interface/ip address:
    local ext_ni ext_ip
    local -a ext
    if ext=( $( nif_discern_external_iface ) ); then
        ext_ni="${ext[0]}"
        ext_ip="${ext[1]}"
    fi

    # Get raw interface info
    IFS=$'|'
    local -a ifaces=( $( ip addr | sed -E 's/^[[:digit:]]+:/\|\0/' ) )

    # Trim empty first element that precedes the initial '|'
    ifaces=( "${ifaces[@]:1}" )

    local regex_name='[[:digit:]]+: ([[:alnum:]]+):'
    local regex_addr=' *inet ([.[:digit:]]+)'

    # Filter info for global array:

    local iface
    local name addr packedarray
    local -a subarray
    for iface in "${ifaces[@]}"; do
        IFS=$' '
        subarray=()
        name=
        addr=
        if [[ "$iface" =~ $regex_name ]]; then
            name="${BASH_REMATCH[1]}"
            subarray=( "${subarray[@]}" "$name" )
            if [[ "$iface" =~ $regex_addr ]]; then
                addr="${BASH_REMATCH[1]}"
                subarray=( "${subarray[@]}" "$addr" )
            fi
            if [ "$name" = "$ext_ni" ] && [ "$addr" = "$ext_ip" ]; then
               subarray=( "${subarray[@]}" "external" )
            fi
        fi
        packedarray="${subarray[*]}"
        IFS=$'\n'
        iflist=( "${iflist[@]}" "$packedarray" )
    done
}

nif_is_external()
{
    local -a parts=( $1 )
    [ "${#parts[@]}" -gt 2 ] && [ "${parts[2]}" = "external" ]
}

nif_is_internal()
{
    # parts is an 'iface' value, an array with the interface name, ip address, etc.
    local -a parts=( $1 )
    local -i octet
    local IFS=$'.'
    
    if [ "${#parts[@]}" -eq 2 ]; then
        local -a addr=( ${parts[1]} )
        if [ "${#addr[@]}" -eq 4 ]; then
            octet="${addr[0]}";
            if [ "$octet" -ne 127 ]; then
                return 0
            fi
        else
            echo "The ip address,'${parts[1]}', doesn't seem to be an IP address" >&2
        fi
    elif [ "${#parts[@]}" -eq 1 ]; then
        return 0
    fi
    
    return 1
}

nif_get_name()
{
    local IFS=$' '
    local -a parts=( $1 )
    echo "${parts[0]}" 
}

# Since we need to second array element, make sure you
# call this function with a quoted "$iface" so the spaces
# will be included in the string to be parsed into an
# array.
nif_get_addr()
{
    local IFS=$' '
    local -a parts=( $1 )
    if [ "${#parts[*]}" -gt 1 ]; then
        echo "${parts[1]}"
        return 0
    fi

    return 1
}

nif_get_external_info()
{
    local op="${1:-'-a'}"
    if ! [[ "-a -n" =~ "$op" ]]; then
        echo "Unrecognized parameter [32;1m$op[m" >&2
        return 1
    fi

    local iface
    for iface in "${IFACES[@]}"; do
        if nif_is_external "$iface"; then
            if [ "$op" == "-a" ]; then
                nif_get_addr "$iface"
                return 0
            elif [ "$op" == "-n" ]; then
                nif_get_name "$iface"
                return 0
            fi
        fi
    done

    return 1
    
}

nif_get_first_internal_info()
{
    local op="${1:-'-a'}"
    if ! [[ "-a -n" =~ "$op" ]]; then
        echo "Unrecognized parameter [32;1m$op[m" >&2
        return 1
    fi

    local iface
    for iface in "${IFACES[@]}"; do
        if nif_is_internal "$iface"; then
            if [ "$op" == "-a" ]; then
                nif_get_addr "$iface"
                return 0
            elif [ "$op" == "-n" ]; then
                nif_get_name "$iface"
                return 0
            fi
        fi
    done

    return 1
}


nif_find_external_addr()       { nif_get_external_info -a; }
nif_find_external_name()       { nif_get_external_info -n; }
nif_find_first_internal_addr() { nif_get_first_internal_info -a; }
nif_find_first_internal_name() { nif_get_first_internal_info -n; }

nif_confirm_resolv_ctl_available()
{
    systemd-resolve --status > /dev/null
    # resolvectl system > /dev/null
    if [ "$?" -ne 0 ]; then
        echo "The resolvectl system is not available.  Enable it by invoking 'systemctl enable systemd-resolved.service'" >&2
        exit 1
    fi
}

nif_network_source_address()
{
    local IFS=$'.'
    local -a parts=( $1 )
    if [ "${#parts[@]}" -eq 4 ]; then
        echo "${parts[*]:0:3}.0/24"
    fi
}

# nif_confirm_resolv_ctl_available


nif_collect_dns_servers
nif_collect_interfaces

